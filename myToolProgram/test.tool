program BinaryTree {
println(new BTComputer().compute());
}
class BTComputer{
var theTree :
BT
;
var
temp
:
Bool
;
def
compute
(
)
:
String
=
{
theTree
=
new
BT
(
)
;
temp
=
theTree
.
setUpBT
(
)
;
temp
=
theTree
.
addNode
(
50
,
"
)
;
temp
=
theTree
.
addNode
(
25
,
"
)
;
temp
=
theTree
.
addNode
(
15
,
"
)
;
temp
=
theTree
.
addNode
(
30
,
"
)
;
temp
=
theTree
.
addNode
(
75
,
"
)
;
temp
=
theTree
.
addNode
(
85
,
"
)
;
temp
=
theTree
.
inOrderTraverseTree
(
theTree
.
getRoot
(
)
)
;
println
(
"
)
;
println
(
theTree
.
findNode
(
75
)
.
toString
(
)
)
;
return
"
;
}
}
class
Null
extends
Node
{
}
class
BT
{
var
root
:
Node
;
var
null
:
Null
;
var
temp
:
Bool
;
def
getRoot
(
)
:
Node
=
{
return
root
;
}
def
setUpBT
(
)
:
Bool
=
{
null
=
new
Null
(
)
;
root
=
null
;
temp
=
false
;
return
true
;
}
def
addNode
(
key
:
Int
,
name
:
String
)
:
Bool
=
{
var
newNode
:
Node
;
var
parent
:
Node
;
var
focusNode
:
Node
;
var
stop
:
Bool
;
stop
=
true
;
newNode
=
new
Node
(
)
;
temp
=
newNode
.
setNode
(
key
,
name
,
null
)
;
if
(
root
==
null
)
{
root
=
newNode
;
}
else
{
focusNode
=
root
;
while
(
stop
)
{
parent
=
focusNode
;
if
(
key
<
focusNode
.
getKey
(
)
)
{
focusNode
=
focusNode
.
getLeftChild
(
)
;
if
(
focusNode
==
null
)
{
temp
=
parent
.
setLeftChild
(
newNode
)
;
stop
=
false
;
}
}
else
{
focusNode
=
focusNode
.
getRightChild
(
)
;
if
(
focusNode
==
null
)
{
temp
=
parent
.
setRightChild
(
newNode
)
;
stop
=
false
;
}
}
}
}
return
true
;
}
def
inOrderTraverseTree
(
focusNode
:
Node
)
:
Bool
=
{
if
(
!
(
focusNode
==
null
)
)
{
temp
=
this
.
inOrderTraverseTree
(
focusNode
.
getLeftChild
(
)
)
;
println
(
focusNode
.
toString
(
)
)
;
temp
=
this
.
inOrderTraverseTree
(
focusNode
.
getRightChild
(
)
)
;
}
return
true
;
}
def
preorderTraverseTree
(
focusNode
:
Node
)
:
Bool
=
{
if
(
!
(
focusNode
==
null
)
)
{
println
(
focusNode
.
toString
(
)
)
;
temp
=
this
.
preorderTraverseTree
(
focusNode
.
getLeftChild
(
)
)
;
temp
=
this
.
preorderTraverseTree
(
focusNode
.
getRightChild
(
)
)
;
}
return
true
;
}
def
postOrderTraverseTree
(
focusNode
:
Node
)
:
Bool
=
{
if
(
!
(
focusNode
==
null
)
)
{
temp
=
this
.
postOrderTraverseTree
(
focusNode
.
getLeftChild
(
)
)
;
temp
=
this
.
postOrderTraverseTree
(
focusNode
.
getRightChild
(
)
)
;
println
(
focusNode
.
toString
(
)
)
;
}
return
true
;
}
def
findNode
(
key
:
Int
)
:
Node
=
{
var
focusNode
:
Node
;
var
ret
:
Node
;
focusNode
=
root
;
while
(
!
(
focusNode
.
getKey
(
)
==
key
)
)
{
if
(
key
<
focusNode
.
getKey
(
)
)
{
focusNode
=
focusNode
.
getLeftChild
(
)
;
}
else
{
focusNode
=
focusNode
.
getRightChild
(
)
;
}
if
(
focusNode
==
null
)
ret
=
null
;
}
ret
=
focusNode
;
return
ret
;
}
}
class
Node
{
var
null
:
Null
;
var
key
:
Int
;
var
name
:
String
;
var
leftChild
:
Node
;
var
rightChild
:
Node
;
def
setNode
(
key1
:
Int
,
name1
:
String
,
null1
:
Null
)
:
Bool
=
{
key
=
key1
;
name
=
name1
;
null
=
null1
;
leftChild
=
null1
;
rightChild
=
null1
;
return
true
;
}
def
getKey
(
)
:
Int
=
{
return
key
;
}
def
getLeftChild
(
)
:
Node
=
{
return
leftChild
;
}
def
getRightChild
(
)
:
Node
=
{
return
rightChild
;
}
def
setLeftChild
(
child
:
Node
)
:
Bool
=
{
leftChild
=
child
;
return
true
;
}
def
setRightChild
(
child
:
Node
)
:
Bool
=
{
rightChild
=
child
;
return
true
;
}
def
toString
(
)
:
String
=
{
var
resultat
:
String
;
resultat
=
name
+
"
+
key	
;
return
resultat
;
}
}
